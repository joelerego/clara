{"version":3,"sources":["workspace/common/WorkspaceToolbar.js","../node_modules/@material-ui/icons/Delete.js","workspace/common/WorkspaceTableHead.js","workspace/common/WorkspaceTable.js","workspace/plan/ViewPlans.js"],"names":["useToolbarStyles","makeStyles","theme","appBar","color","palette","primary","background","toolbar","paddingLeft","spacing","paddingRight","buttons","marginLeft","action","textTransform","title","text","fontWeight","highlight","type","secondary","main","backgroundColor","lighten","light","dark","actionIcon","marginRight","WorkspaceToolbar","props","classes","selectionCount","actions","onAction","makeActionHandler","identifier","normalTitle","className","variant","id","component","selectedTitle","selected","position","elevation","clsx","map","size","onClick","icon","Fragment","_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","WorkspaceTableHead","onSelectAll","order","orderBy","rowCount","onRequestSort","headers","TableHead","TableRow","TableCell","padding","Checkbox","indeterminate","checked","onChange","header","key","align","numeric","disablePadding","sortDirection","TableSortLabel","active","direction","property","event","label","visuallyHidden","descendingComparator","a","b","useStyles","root","width","paper","marginBottom","table","minWidth","border","clip","height","margin","overflow","top","WorkspaceTable","onSelected","rows","compact","renderCellValue","React","useState","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","makeHandleSelect","name","selectedIndex","indexOf","newSelected","concat","slice","length","makeClickHandler","row","index","emptyRows","Math","min","Paper","TableContainer","Table","target","newSelection","TableBody","array","comparator","stabilizedThis","el","sort","stableSort","getComparator","isItemSelected","hover","role","tabIndex","rowIndex","column","columnIndex","renderCells","style","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","defaultProps","container","actions1","AddIcon","ListIcon","DeleteIcon","actions2","CompactIcon","mapDispatchToProps","fetchPlans","newPlan","connect","state","plans","withRouter","history","setSelected","setCompact","useEffect","account","push","code","pricePerBillingPeriod","term","termUnit","setupFee","trialPeriod","trialPeriodUnit"],"mappings":"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","file":"static/js/12.6e10d0d4.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Button from \"@material-ui/core/Button\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    appBar: {\n        color: theme.palette.primary,\n        background: \"white\",\n    },\n    toolbar: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    buttons: {\n        marginLeft: \"auto\",\n    },\n    action: {\n        textTransform: \"none\",\n        paddingLeft: 16,\n        paddingRight: 16,\n    },\n    title: {\n        color: theme.palette.text.primary,\n        fontWeight: 500,\n    },\n    highlight:\n        theme.palette.type === \"light\"\n            ? {\n                  color: theme.palette.secondary.main,\n                  backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n              }\n            : {\n                  color: theme.palette.text.primary,\n                  backgroundColor: theme.palette.secondary.dark,\n              },\n    actionIcon: {\n        marginRight: 4,\n    },\n}));\n\nfunction WorkspaceToolbar(props) {\n    const classes = useToolbarStyles();\n    const { title, selectionCount, actions, onAction } = props;\n\n    const makeActionHandler = (identifier) => () => onAction(identifier);\n\n    const normalTitle = (\n        <Typography\n            className={classes.title}\n            variant=\"h6\"\n            id=\"tableTitle\"\n            component=\"div\"\n        >\n            {title}\n        </Typography>\n    );\n\n    const selectedTitle = (\n        <Typography\n            className={classes.title}\n            variant=\"subtitle1\"\n            component=\"div\"\n        >\n            {selectionCount} selected\n        </Typography>\n    );\n\n    const selected = selectionCount > 0;\n\n    const recordButtons = () => {\n        if (actions) {\n            return actions.map(\n                (action) =>\n                    !action.primary && (\n                        <Button\n                            className={classes.action}\n                            variant=\"text\"\n                            size=\"small\"\n                            color=\"primary\"\n                            onClick={makeActionHandler(action.identifier)}\n                        >\n                            <action.icon className={classes.actionIcon} />\n                            {action.title}\n                        </Button>\n                    )\n            );\n        }\n        return null;\n    };\n\n    const normalButtons = () => {\n        if (actions) {\n            return (\n                <React.Fragment>\n                    {actions.map(\n                        (action) =>\n                            action.primary && (\n                                <Button\n                                    className={classes.action}\n                                    variant=\"text\"\n                                    size=\"small\"\n                                    color=\"primary\"\n                                    onClick={makeActionHandler(\n                                        action.identifier\n                                    )}\n                                >\n                                    <action.icon\n                                        className={classes.actionIcon}\n                                    />\n                                    {action.title}\n                                </Button>\n                            )\n                    )}\n                </React.Fragment>\n            );\n        }\n        return null;\n    };\n\n    return (\n        <AppBar position=\"static\" elevation={1} className={classes.appBar}>\n            <Toolbar\n                className={clsx(classes.toolbar, {\n                    [classes.highlight]: selected,\n                })}\n            >\n                {selected ? selectedTitle : normalTitle}\n\n                <div className={classes.buttons}>\n                    {selected ? recordButtons() : normalButtons()}\n                </div>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\nWorkspaceToolbar.propTypes = {\n    selectionCount: PropTypes.number.isRequired,\n};\n\nexport default WorkspaceToolbar;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\n\nexport default function WorkspaceTableHead(props) {\n    const {\n        classes,\n        onSelectAll,\n        order,\n        orderBy,\n        selectionCount,\n        rowCount,\n        onRequestSort,\n        headers,\n    } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={\n                            selectionCount > 0 && selectionCount < rowCount\n                        }\n                        checked={rowCount > 0 && selectionCount === rowCount}\n                        onChange={onSelectAll}\n                    />\n                </TableCell>\n                {headers.map((header) => (\n                    <TableCell\n                        key={header.id}\n                        align={header.numeric ? \"right\" : \"left\"}\n                        padding={header.disablePadding ? \"none\" : \"default\"}\n                        sortDirection={orderBy === header.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === header.id}\n                            direction={orderBy === header.id ? order : \"asc\"}\n                            onClick={createSortHandler(header.id)}\n                        >\n                            {header.label}\n                            {orderBy === header.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === \"desc\"\n                                        ? \"sorted descending\"\n                                        : \"sorted ascending\"}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nWorkspaceTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    selectionCount: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAll: PropTypes.func.isRequired,\n    order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nimport WorkspaceTableHead from \"./WorkspaceTableHead\";\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === \"desc\"\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: \"100%\",\n    },\n    paper: {\n        width: \"100%\",\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: \"rect(0 0 0 0)\",\n        height: 1,\n        margin: -1,\n        overflow: \"hidden\",\n        padding: 0,\n        position: \"absolute\",\n        top: 20,\n        width: 1,\n    },\n}));\n\nexport default function WorkspaceTable(props) {\n    const classes = useStyles();\n    const {\n        onSelected,\n        rows,\n        headers,\n        selected,\n        compact,\n        onClick,\n        renderCellValue,\n    } = props;\n    const [order, setOrder] = React.useState(\"asc\");\n    const [orderBy, setOrderBy] = React.useState(\"calories\");\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(props.rowsPerPage);\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === \"asc\";\n        setOrder(isAsc ? \"desc\" : \"asc\");\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelection = rows.map((row) => row.identifier);\n            onSelected(newSelection);\n        } else {\n            onSelected([]);\n        }\n    };\n\n    const makeHandleSelect = (name) => (event) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1)\n            );\n        }\n\n        onSelected(newSelected);\n    };\n\n    const makeClickHandler = (row, index) => () => {\n        onClick(row);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows =\n        rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    const renderCells = (row, rowIndex) => (\n        <React.Fragment>\n            {headers.map((column, columnIndex) => (\n                <TableCell onClick={makeClickHandler(row, rowIndex)}>\n                    {renderCellValue(row, rowIndex, column, columnIndex)}\n                </TableCell>\n            ))}\n        </React.Fragment>\n    );\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        size={compact ? \"small\" : \"medium\"}\n                    >\n                        <WorkspaceTableHead\n                            classes={classes}\n                            selectionCount={selected.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onSelectAll={handleSelectAllClick}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                            headers={headers}\n                        />\n                        <TableBody>\n                            {stableSort(rows, getComparator(order, orderBy))\n                                .slice(\n                                    page * rowsPerPage,\n                                    page * rowsPerPage + rowsPerPage\n                                )\n                                .map((row, index) => {\n                                    const isItemSelected = isSelected(\n                                        row.identifier\n                                    );\n\n                                    return (\n                                        <TableRow\n                                            hover={true}\n                                            role=\"checkbox\"\n                                            tabIndex={-1}\n                                            key={row.identifier}\n                                            selected={isItemSelected}\n                                        >\n                                            <TableCell padding=\"checkbox\">\n                                                <Checkbox\n                                                    checked={isItemSelected}\n                                                    onChange={makeHandleSelect(\n                                                        row.identifier\n                                                    )}\n                                                />\n                                            </TableCell>\n\n                                            {renderCells(row, index)}\n                                        </TableRow>\n                                    );\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow\n                                    style={{\n                                        height: (compact ? 33 : 53) * emptyRows,\n                                    }}\n                                >\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[10, 20, 30, 40, 50]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>\n    );\n}\n\nWorkspaceTable.defaultProps = {\n    rowsPerPage: 15,\n};\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\n\nimport WorkspaceTable from \"../common/WorkspaceTable\";\nimport WorkspaceToolbar from \"../common/WorkspaceToolbar\";\nimport * as actions from \"../../redux/actions\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ListIcon from \"@material-ui/icons/ViewList\";\nimport CompactIcon from \"@material-ui/icons/ViewCompact\";\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        padding: 16,\n    },\n}));\n\nconst headers = [\n    {\n        identifier: \"name\",\n        numeric: false,\n        disablePadding: false,\n        label: \"Name\",\n    },\n    {\n        identifier: \"code\",\n        numeric: false,\n        disablePadding: false,\n        label: \"Code\",\n    },\n    {\n        identifier: \"price\",\n        numeric: false,\n        disablePadding: false,\n        label: \"Price\",\n    },\n    {\n        identifier: \"term\",\n        numeric: false,\n        disablePadding: false,\n        label: \"Term\",\n    },\n    {\n        identifier: \"setupFee\",\n        numeric: false,\n        disablePadding: false,\n        label: \"Setup Fee\",\n    },\n    {\n        identifier: \"trial\",\n        numeric: false,\n        disablePadding: false,\n        label: \"Trial\",\n    },\n];\n\nconst actions1 = [\n    {\n        identifier: \"new\",\n        title: \"New\",\n        icon: AddIcon,\n        primary: true,\n    },\n    {\n        identifier: \"default\",\n        title: \"Default\",\n        icon: ListIcon,\n        primary: true,\n    },\n    {\n        identifier: \"delete\",\n        title: \"Delete\",\n        icon: DeleteIcon,\n        primary: false,\n    },\n];\n\nconst actions2 = [\n    {\n        identifier: \"new\",\n        title: \"New\",\n        icon: AddIcon,\n        primary: true,\n    },\n    {\n        identifier: \"compact\",\n        title: \"Compact\",\n        icon: CompactIcon,\n        primary: true,\n    },\n    {\n        identifier: \"delete\",\n        title: \"Delete\",\n        icon: DeleteIcon,\n        primary: false,\n    },\n];\n\nfunction ViewPlans(props) {\n    const { plans, fetchPlans, newPlan, history } = props;\n    const classes = useStyles();\n    const [selected, setSelected] = useState([]);\n    const [compact, setCompact] = useState(false);\n\n    const handleAction = (type) => {\n        if (type === \"new\") {\n            newPlan();\n        } else if (type === \"compact\" || type === \"default\") {\n            setCompact(!compact);\n        }\n    };\n\n    const onClick = (account) => {\n        history.push(\"/plans/\" + account.identifier);\n    };\n\n    const renderCellValue = (row, rowIndex, column, columnIndex) => {\n        switch (column.identifier) {\n            case \"name\": {\n                return row.name;\n            }\n\n            case \"code\": {\n                return row.code;\n            }\n\n            case \"price\": {\n                return row.pricePerBillingPeriod + \" INR\";\n            }\n\n            case \"term\": {\n                return row.term + \" \" + row.termUnit;\n            }\n\n            case \"setupFee\": {\n                return row.setupFee + \" INR\";\n            }\n\n            case \"trial\": {\n                return row.trialPeriod + \" \" + row.trialPeriodUnit;\n            }\n\n            default: {\n                return \"Unknown Column\";\n            }\n        }\n    };\n\n    useEffect(() => {\n        fetchPlans();\n    }, [fetchPlans]);\n\n    return (\n        <div>\n            <WorkspaceToolbar\n                title=\"Plans\"\n                selectionCount={selected.length}\n                actions={compact ? actions1 : actions2}\n                onAction={handleAction}\n            />\n            <div className={classes.container}>\n                <WorkspaceTable\n                    headers={headers}\n                    onSelected={setSelected}\n                    rows={plans}\n                    selected={selected}\n                    compact={compact}\n                    onClick={onClick}\n                    renderCellValue={renderCellValue}\n                    rowsPerPage={10}\n                />\n            </div>\n        </div>\n    );\n}\n\nfunction mapStateToProps(state) {\n    return {\n        plans: state.plans,\n    };\n}\n\nconst mapDispatchToProps = {\n    fetchPlans: actions.fetchPlans,\n    newPlan: actions.newPlan,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(ViewPlans));\n"],"sourceRoot":""}