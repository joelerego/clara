{"version":3,"sources":["../node_modules/@material-ui/icons/Delete.js","utils.js","workspace/account/ViewAccounts.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","toDateString","date","toLocaleDateString","undefined","year","month","day","useStyles","makeStyles","theme","container","padding","headers","identifier","numeric","disablePadding","label","filterFields","type","title","startTitle","startIdentifier","endTitle","endIdentifier","options","defaultValue","option","startDate","Date","endDate","actions1","icon","AddIcon","primary","FilterIcon","ListIcon","DeleteIcon","actions2","CompactIcon","mapDispatchToProps","fetchAccounts","actions","newAccount","connect","state","accounts","withRouter","props","history","location","params","queryString","parse","search","Number","classes","useState","selected","setSelected","keys","length","openFilter","setOpenFilter","compact","setCompact","defaultFilterValues","toFilterState","filterValues","setFilterValues","generateURL","values","flatValues","toURLParams","URLSearchParams","push","toString","useEffect","selectionCount","onAction","className","item","lg","onSelected","rows","onClick","account","renderCellValue","row","rowIndex","column","columnIndex","firstName","lastName","emailAddress","companyName","createdOn","filter","fields","onValueChange","field","newValues","assign","onClear","defaultValues"],"mappings":"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","file":"static/js/13.03dc0c13.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;","export function toDateString(date) {\n    const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n    return date.toLocaleDateString(undefined, options);\n}\n","import React, { useEffect, useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\n\nimport WorkspaceTable from \"../common/WorkspaceTable\";\nimport WorkspaceToolbar from \"../common/WorkspaceToolbar\";\nimport WorkspaceFilter from \"../common/WorkspaceFilter\";\nimport { toURLParams, toFilterState } from \"../common/WorkspaceFilter\";\nimport * as actions from \"../../redux/actions\";\nimport { toDateString } from \"../../utils\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ListIcon from \"@material-ui/icons/ViewList\";\nimport FilterIcon from \"@material-ui/icons/FilterList\";\nimport CompactIcon from \"@material-ui/icons/ViewCompact\";\nimport queryString from \"query-string\";\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        padding: 16,\n    },\n}));\n\nconst headers = [\n    { identifier: \"name\", numeric: false, disablePadding: true, label: \"Name\" },\n    {\n        identifier: \"email\",\n        numeric: false,\n        disablePadding: false,\n        label: \"Email\",\n    },\n    {\n        identifier: \"company\",\n        numeric: false,\n        disablePadding: false,\n        label: \"Company\",\n    },\n    {\n        identifier: \"created\",\n        numeric: false,\n        disablePadding: false,\n        label: \"Created\",\n    },\n    {\n        identifier: \"plans\",\n        numeric: false,\n        disablePadding: false,\n        label: \"Plans\",\n    },\n];\n\nconst filterFields = [\n    {\n        identifier: \"date_range\",\n        type: \"time_range\",\n        title: \"Time Range\",\n        startTitle: \"Start Date\",\n        startIdentifier: \"start_date\",\n        endTitle: \"End Date\",\n        endIdentifier: \"end_date\",\n        options: [\n            {\n                value: \"all_time\",\n                title: \"All Time\",\n            },\n            {\n                value: \"last_3_months\",\n                title: \"Last 3 Months\",\n            },\n            {\n                value: \"last_6_months\",\n                title: \"Last 6 Months\",\n            },\n            {\n                value: \"last_9_months\",\n                title: \"Last 9 Months\",\n            },\n            {\n                value: \"last_12_months\",\n                title: \"Last 12 Months\",\n            },\n            {\n                value: \"last_15_months\",\n                title: \"Last 15 Months\",\n            },\n            {\n                value: \"last_18_months\",\n                title: \"Last 18 Months\",\n            },\n            {\n                value: \"custom\",\n                title: \"Custom\",\n            },\n        ],\n        defaultValue: {\n            option: \"all_time\",\n            startDate: new Date(),\n            endDate: new Date(),\n        },\n    },\n    {\n        identifier: \"account_status\",\n        type: \"select\",\n        title: \"Account Status\",\n        options: [\n            {\n                value: \"all\",\n                title: \"All\",\n            },\n            {\n                value: \"open\",\n                title: \"Open\",\n            },\n            {\n                value: \"closed\",\n                title: \"Closed\",\n            },\n        ],\n        defaultValue: \"all\",\n    },\n    {\n        identifier: \"subscription_status\",\n        type: \"select\",\n        title: \"Subscription Status\",\n        options: [\n            {\n                value: \"all\",\n                title: \"All\",\n            },\n            {\n                value: \"active\",\n                title: \"Active\",\n            },\n            {\n                value: \"renewing\",\n                title: \"Renewing\",\n            },\n            {\n                value: \"non_renewing\",\n                title: \"Non-renewing\",\n            },\n            {\n                value: \"future_start_date\",\n                title: \"Future Start Date\",\n            },\n            {\n                value: \"in_trial\",\n                title: \"In Trial\",\n            },\n            {\n                value: \"paused\",\n                title: \"Paused\",\n            },\n            {\n                value: \"past_due\",\n                title: \"Past Due\",\n            },\n            {\n                value: \"no_subscription\",\n                title: \"No Subscription\",\n            },\n        ],\n        defaultValue: \"all\",\n    },\n];\n\nconst actions1 = [\n    {\n        identifier: \"new\",\n        title: \"New\",\n        icon: AddIcon,\n        primary: true,\n    },\n    {\n        identifier: \"filter\",\n        title: \"Filter\",\n        icon: FilterIcon,\n        primary: true,\n    },\n    {\n        identifier: \"default\",\n        title: \"Default\",\n        icon: ListIcon,\n        primary: true,\n    },\n    {\n        identifier: \"delete\",\n        title: \"Delete\",\n        icon: DeleteIcon,\n        primary: false,\n    },\n];\n\nconst actions2 = [\n    {\n        identifier: \"new\",\n        title: \"New\",\n        icon: AddIcon,\n        primary: true,\n    },\n    {\n        identifier: \"filter\",\n        title: \"Filter\",\n        icon: FilterIcon,\n        primary: true,\n    },\n    {\n        identifier: \"compact\",\n        title: \"Compact\",\n        icon: CompactIcon,\n        primary: true,\n    },\n    {\n        identifier: \"delete\",\n        title: \"Delete\",\n        icon: DeleteIcon,\n        primary: false,\n    },\n];\n\n/* [TODO]\n * 1. Filter logic\n * 2. Add `accountStatus`` and `subscriptions` fields to the Account entity.\n */\nfunction ViewAccounts(props) {\n    const { accounts, fetchAccounts, newAccount, history, location } = props;\n    const params = queryString.parse(location.search);\n\n    if (\"start_date\" in params) {\n        params[\"start_date\"] = new Date(Number(params[\"start_date\"]));\n    }\n    if (\"end_date\" in params) {\n        params[\"end_date\"] = new Date(Number(params[\"end_date\"]));\n    }\n\n    const classes = useStyles();\n    const [selected, setSelected] = useState([]);\n    const [openFilter, setOpenFilter] = useState(\n        Object.keys(params).length > 0\n    );\n    const [compact, setCompact] = useState(false);\n\n    // TODO: Should we cache this?\n\n    const defaultFilterValues = toFilterState(filterFields, params);\n    const [filterValues, setFilterValues] = useState(defaultFilterValues);\n\n    const handleAction = (type) => {\n        if (type === \"new\") {\n            newAccount();\n        } else if (type === \"filter\") {\n            setOpenFilter(!openFilter);\n        } else if (type === \"compact\" || type === \"default\") {\n            setCompact(!compact);\n        }\n    };\n\n    const onClick = (account) => {\n        history.push(\"/accounts/\" + account.identifier);\n    };\n\n    const generateURL = (values) => {\n        if (values) {\n            const flatValues = toURLParams(filterFields, values);\n            const params = new URLSearchParams(flatValues);\n\n            history.push(\"/accounts?\" + params.toString());\n        } else {\n            history.push(\"/accounts\");\n        }\n    };\n\n    // TODO: Create a deep copy without serializing !\n    const onFilterValueChange = (field, value) => {\n        const newValues = Object.assign({}, filterValues);\n        newValues[field] = value;\n        setFilterValues(newValues);\n\n        generateURL(newValues);\n    };\n\n    const onFilterClear = () => {\n        const defaultValues = toFilterState(filterFields, {});\n        setFilterValues(defaultValues);\n\n        generateURL(null);\n    };\n\n    const renderCellValue = (row, rowIndex, column, columnIndex) => {\n        switch (column.identifier) {\n            case \"name\": {\n                return row.firstName + \" \" + row.lastName;\n            }\n\n            case \"email\": {\n                return row.emailAddress;\n            }\n\n            case \"company\": {\n                return row.companyName;\n            }\n\n            case \"created\": {\n                return toDateString(row.createdOn);\n            }\n\n            case \"plans\": {\n                return \"TODO\";\n            }\n\n            default: {\n                return \"Unknown Column\";\n            }\n        }\n    };\n\n    useEffect(() => {\n        const flatValues = toURLParams(filterFields, filterValues);\n        fetchAccounts(flatValues);\n    }, [fetchAccounts, filterValues]);\n\n    return (\n        <div>\n            <WorkspaceToolbar\n                title=\"Accounts\"\n                selectionCount={selected.length}\n                actions={compact ? actions1 : actions2}\n                onAction={handleAction}\n            />\n            <Grid container={true} className={classes.container}>\n                <Grid item={true} lg={openFilter ? 10 : 12}>\n                    <WorkspaceTable\n                        headers={headers}\n                        onSelected={setSelected}\n                        rows={accounts}\n                        selected={selected}\n                        compact={compact}\n                        onClick={onClick}\n                        renderCellValue={renderCellValue}\n                    />\n                </Grid>\n                {openFilter && (\n                    <Grid item={true} lg={2} className={classes.filter}>\n                        <WorkspaceFilter\n                            fields={filterFields}\n                            values={filterValues}\n                            onValueChange={onFilterValueChange}\n                            onClear={onFilterClear}\n                        />\n                    </Grid>\n                )}\n            </Grid>\n        </div>\n    );\n}\n\nfunction mapStateToProps(state) {\n    return {\n        accounts: state.accounts,\n    };\n}\n\nconst mapDispatchToProps = {\n    fetchAccounts: actions.fetchAccounts,\n    newAccount: actions.newAccount,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(ViewAccounts));\n"],"sourceRoot":""}